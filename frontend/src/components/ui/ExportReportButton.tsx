"use client";

import { useState, useCallback } from "react";
import { useNotifications } from "@/contexts/NotificationContext";
import { useAuth } from "@/contexts/AuthContext";
import {
  DocumentArrowDownIcon,
  ChevronDownIcon,
} from "@heroicons/react/24/outline";

interface ExportReportButtonProps {
  data?: any;
  reportType?: string;
  className?: string;
  variant?: "button" | "dropdown";
}

export default function ExportReportButton({
  data,
  reportType,
  className = "",
  variant = "button",
}: ExportReportButtonProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [isExporting, setIsExporting] = useState(false);
  const { addNotification } = useNotifications();
  const { user } = useAuth();

  const generateReportData = useCallback(() => {
    const now = new Date();
    return {
      generatedAt: now.toISOString(),
      generatedBy: user?.name || "Unknown",
      userRole: user?.role || "Unknown",
      reportType:
        reportType ||
        (user?.role === "admin"
          ? "System Overview"
          : user?.role === "officer"
          ? "Verification Summary"
          : "Project Summary"),
      data: data || {},
    };
  }, [user, reportType, data]);

  const exportToCSV = useCallback((reportData: any, filename: string) => {
    try {
      // Convert data to CSV format
      let csvContent = "";

      if (reportData.data.stats) {
        const headers = ["Metric", "Value", "Change", "Change Type"];
        const rows = reportData.data.stats.map((stat: any) => [
          stat.name,
          stat.stat,
          stat.change,
          stat.changeType,
        ]);
        csvContent = [headers, ...rows].map((row) => row.join(",")).join("\n");
      } else if (reportData.data.activities) {
        const headers = ["Date", "Description", "User", "Status"];
        const rows = reportData.data.activities.map((activity: any) => [
          activity.createdAt.toLocaleDateString(),
          activity.description,
          activity.userName,
          activity.status,
        ]);
        csvContent = [headers, ...rows].map((row) => row.join(",")).join("\n");
      } else {
        // Generic CSV export
        csvContent = Object.entries(reportData.data)
          .map(([key, value]) => `${key},${value}`)
          .join("\n");
      }

      const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
      const link = document.createElement("a");
      const url = URL.createObjectURL(blob);
      link.setAttribute("href", url);
      link.setAttribute("download", filename);
      link.style.visibility = "hidden";
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error("Error exporting CSV:", error);
      throw error;
    }
  }, []);

  const exportToJSON = useCallback((reportData: any, filename: string) => {
    try {
      const jsonContent = JSON.stringify(reportData, null, 2);
      const blob = new Blob([jsonContent], { type: "application/json" });
      const link = document.createElement("a");
      const url = URL.createObjectURL(blob);
      link.setAttribute("href", url);
      link.setAttribute("download", filename);
      link.style.visibility = "hidden";
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error("Error exporting JSON:", error);
      throw error;
    }
  }, []);

  const exportToText = useCallback((reportData: any, filename: string) => {
    try {
      let textContent = `
SeaCred Carbon Credit Management Platform
${reportData.reportType} Report
Generated: ${new Date(reportData.generatedAt).toLocaleString()}
Generated By: ${reportData.generatedBy}
Role: ${reportData.userRole}

`;

      if (reportData.data.stats) {
        textContent += `STATISTICS:\n`;
        reportData.data.stats.forEach((stat: any) => {
          textContent += `${stat.name}: ${stat.stat} (${stat.change})\n`;
        });
        textContent += `\n`;
      }

      if (reportData.data.activities) {
        textContent += `RECENT ACTIVITY:\n`;
        reportData.data.activities.forEach((activity: any) => {
          textContent += `${activity.createdAt.toLocaleDateString()}: ${
            activity.description
          }\n`;
        });
        textContent += `\n`;
      }

      if (reportData.data.chartData) {
        textContent += `CHART DATA:\n`;
        reportData.data.chartData.forEach((item: any) => {
          textContent += `${item.name}: Credits=${item.credits}, Projects=${item.projects}\n`;
        });
      }

      const blob = new Blob([textContent], { type: "text/plain" });
      const link = document.createElement("a");
      const url = URL.createObjectURL(blob);
      link.setAttribute("href", url);
      link.setAttribute("download", filename);
      link.style.visibility = "hidden";
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error("Error exporting text:", error);
      throw error;
    }
  }, []);

  const handleExport = useCallback(
    async (format: "csv" | "json" | "txt") => {
      setIsExporting(true);
      try {
        const reportData = generateReportData();
        const timestamp = new Date().toISOString().split("T")[0];
        const filename = `seacred-${reportData.reportType
          .toLowerCase()
          .replace(/\s+/g, "-")}-${user?.role}-${timestamp}.${format}`;

        switch (format) {
          case "csv":
            exportToCSV(reportData, filename);
            break;
          case "json":
            exportToJSON(reportData, filename);
            break;
          case "txt":
            exportToText(reportData, filename);
            break;
        }

        addNotification({
          type: "success",
          title: "Report exported successfully",
          message: `Your ${reportData.reportType} report has been downloaded as ${filename}`,
        });
      } catch (error) {
        addNotification({
          type: "error",
          title: "Export failed",
          message: "Failed to export report. Please try again.",
        });
      } finally {
        setIsExporting(false);
        setIsOpen(false);
      }
    },
    [
      generateReportData,
      exportToCSV,
      exportToJSON,
      exportToText,
      addNotification,
      user?.role,
    ]
  );

  if (variant === "dropdown") {
    return (
      <div className={`relative ${className}`}>
        <button
          onClick={() => setIsOpen(!isOpen)}
          disabled={isExporting}
          className="inline-flex items-center rounded-md bg-green-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-green-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-green-600 transition-colors duration-200 disabled:opacity-50"
        >
          <DocumentArrowDownIcon className="h-4 w-4 mr-2" />
          {isExporting ? "Exporting..." : "Export Report"}
          <ChevronDownIcon className="h-4 w-4 ml-2" />
        </button>

        {isOpen && (
          <div className="absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-10">
            <div className="py-1" role="menu">
              <button
                onClick={() => handleExport("csv")}
                className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                role="menuitem"
              >
                Export as CSV
              </button>
              <button
                onClick={() => handleExport("json")}
                className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                role="menuitem"
              >
                Export as JSON
              </button>
              <button
                onClick={() => handleExport("txt")}
                className="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                role="menuitem"
              >
                Export as Text
              </button>
            </div>
          </div>
        )}
      </div>
    );
  }

  return (
    <button
      onClick={() => handleExport("csv")}
      disabled={isExporting}
      className={`inline-flex items-center rounded-md bg-green-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-green-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-green-600 transition-colors duration-200 disabled:opacity-50 ${className}`}
    >
      <DocumentArrowDownIcon className="h-4 w-4 mr-2" />
      {isExporting ? "Exporting..." : "Export Report"}
    </button>
  );
}
