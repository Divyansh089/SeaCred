{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_20-547ce1e595581e98cd72ac5b168a53d7bd7fc36b",
  "solcVersion": "0.8.20",
  "solcLongVersion": "0.8.20+commit.a1b79de6",
  "userSourceNameMap": {
    "contract/credit.sol": "project/contract/credit.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "shanghai",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ],
      "viaIR": true
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/AccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` from `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/access/IAccessControl.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (access/IAccessControl.sol)\n\npragma solidity >=0.8.4;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted to signal this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call. This account bears the admin role (for the granted role).\n     * Expected in cases where the role was granted using the internal {AccessControl-_grantRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/interfaces/draft-IERC6093.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (interfaces/draft-IERC6093.sol)\npragma solidity >=0.8.4;\n\n/**\n * @dev Standard ERC-20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC-721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC-1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/ERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC-20\n * applications.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * Both values are immutable: they can only be set once during construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /// @inheritdoc IERC20\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /// @inheritdoc IERC20\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /// @inheritdoc IERC20\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Skips emitting an {Approval} event indicating an allowance update. This is not\n     * required by the ERC. See {xref-ERC20-_approve-address-address-uint256-bool-}[_approve].\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner`'s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     *\n     * ```solidity\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner`'s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance < type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/extensions/IERC20Metadata.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity >=0.6.2;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/ERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/introspection/IERC165.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (utils/introspection/IERC165.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/ReentrancyGuard.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
      },
      "project/contract/credit.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * BlueCarbonAdminTokenRestricted\n * Minimal, admin‑centric ERC‑20 with officer distribution + IPFS‑keyed mint ledger.\n *\n * Your ask, implemented:\n * - Admin can: set officers, pause, approve+mint by IPFS CID, burn (supply reduction),\n *   and transfer own balance to officers if desired.\n * - Officer can: ONLY transfer out to end‑user wallets (not to admin/officers).\n * - Users: receive tokens; cannot transfer (by design here).\n * - Small ledger: cumulative minted/burned; per‑officer received/distributed; per‑user received;\n *   per‑report mint record (prevents double mint for the same CID).\n *\n * NOTE: Uses OpenZeppelin 4.9.x style hooks (_beforeTokenTransfer/_afterTokenTransfer).\n */\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\ncontract BlueCarbonAdminTokenRestricted is\n    ERC20,\n    AccessControl,\n    ReentrancyGuard\n{\n    bytes32 public constant ADMIN_ROLE = DEFAULT_ADMIN_ROLE;\n    bytes32 public constant OFFICER_ROLE = keccak256(\"OFFICER_ROLE\");\n\n    uint8 private immutable _decimals;\n    bool public paused;\n\n    // Verification status enum\n    enum VerificationStatus {\n        PENDING, // 0 - Initial status when project is viewed\n        IN_PROGRESS, // 1 - Officer has started verification\n        APPROVED, // 2 - Verification report submitted and approved\n        REJECTED // 3 - Verification failed\n    }\n\n    // Officer management\n    struct Officer {\n        string name;\n        string designation;\n        string area;\n        string contracts;\n        string jurisdiction;\n        address walletAddress;\n        bool isActive;\n        uint256 assignedAt;\n    }\n\n    // Officer registry\n    mapping(address => Officer) public officers;\n    address[] public officerAddresses;\n    mapping(string => address[]) public officersByArea;\n    mapping(string => address[]) public officersByJurisdiction;\n\n    // User management\n    struct User {\n        string firstName;\n        string lastName;\n        string phone;\n        string email;\n        string district;\n        address walletAddress;\n        bool isRegistered;\n        uint256 registeredAt;\n    }\n\n    // User registry\n    mapping(address => User) public users;\n    address[] public userAddresses;\n    mapping(string => address[]) public usersByDistrict;\n\n    // Project management\n    struct Project {\n        string name;\n        string description;\n        string projectType;\n        uint256 startDate;\n        uint256 endDate;\n        string projectAddress;\n        string city;\n        string state;\n        uint256 landArea;\n        uint256 estimatedCredits;\n        string ipfsUrl;\n        address owner;\n        address assignedOfficer;\n        bool isActive;\n        uint256 createdAt;\n        VerificationStatus verificationStatus; // Added verification status\n        uint256 verificationStartedAt; // When verification started\n        uint256 verificationCompletedAt; // When verification completed\n    }\n\n    // Project registry\n    mapping(uint256 => Project) public projects;\n    uint256 public projectCount;\n    mapping(address => uint256[]) public userProjects;\n    mapping(address => uint256[]) public officerAssignedProjects;\n\n    // Verification Report management\n    struct VerificationReport {\n        uint256 projectId;\n        address officerAddress;\n        uint256 area; // Area in hectares\n        uint256 plots; // Number of plots\n        uint256 uavFlights; // Number of UAV flights\n        uint256 biomass; // Biomass in tonnes\n        uint256 uncertainty; // Uncertainty percentage\n        uint256 creditsRecommended; // Recommended credits in tCO2e\n        bool siteInspection;\n        bool documentationVerified;\n        bool measurementsValidated;\n        bool qualityAssurance;\n        string additionalNotes;\n        uint256 submittedAt;\n        bool isApproved;\n        address approvedBy;\n        uint256 approvedAt;\n    }\n\n    // Verification reports registry\n    mapping(uint256 => VerificationReport) public verificationReports; // projectId => report\n    uint256 public verificationReportCount;\n    mapping(uint256 => uint256) public projectToReportId; // projectId => reportId\n\n    // Per‑report issuance bookkeeping keyed by IPFS CID hash\n    struct ReportApproval {\n        address submitter; // who uploaded the report (off‑chain portal)\n        string cid; // IPFS CID for the report bundle\n        uint256 approvedAmount; // amount minted for this report\n        address recipient; // officer or user who received the mint\n        uint64 approvedAt;\n        bool minted; // prevents double‑mint for the same CID\n    }\n\n    // reportKey (keccak256(cid)) => approval\n    mapping(bytes32 => ReportApproval) public approvals;\n\n    // Minimal ledger counters (for dashboards)\n    uint256 public mintedCumulative; // total minted over contract lifetime\n    uint256 public burnedCumulative; // total burned over contract lifetime\n\n    // Officer/user distribution stats\n    mapping(address => uint256) public officerReceived; // minted/transferred TO officer from admin\n    mapping(address => uint256) public officerDistributed; // officer → users\n    mapping(address => uint256) public userReceived; // total received by a user from officers\n\n    event OfficerSet(address indexed officer, bool enabled);\n    event OfficerRegistered(\n        address indexed officer,\n        string name,\n        string designation,\n        string area,\n        string jurisdiction\n    );\n    event OfficerUpdated(\n        address indexed officer,\n        string name,\n        string designation,\n        string area,\n        string jurisdiction\n    );\n    event ReportApprovedAndMinted(\n        bytes32 indexed reportKey,\n        address indexed recipient,\n        uint256 amount,\n        string cid\n    );\n    event OfficerDistributed(\n        address indexed officer,\n        address indexed toUser,\n        uint256 amount\n    );\n    event UserRegistered(\n        address indexed walletAddress,\n        string firstName,\n        string lastName,\n        string district\n    );\n    event ProjectAdded(\n        uint256 indexed projectId,\n        address indexed owner,\n        string name,\n        string projectAddress\n    );\n    event OfficerAssignedToProject(\n        uint256 indexed projectId,\n        address indexed officer\n    );\n    event VerificationStatusUpdated(\n        uint256 indexed projectId,\n        VerificationStatus status,\n        address indexed officer\n    );\n    event VerificationReportSubmitted(\n        uint256 indexed projectId,\n        uint256 indexed reportId,\n        address indexed officer,\n        uint256 creditsRecommended\n    );\n    event VerificationReportApproved(\n        uint256 indexed projectId,\n        uint256 indexed reportId,\n        address indexed approvedBy\n    );\n    event ProjectRemoved(uint256 indexed projectId, address indexed remover);\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_,\n        address admin_\n    ) ERC20(name_, symbol_) {\n        _decimals = decimals_;\n        _grantRole(ADMIN_ROLE, admin_);\n    }\n\n    // ——— Admin controls ———\n    function pause() external onlyRole(ADMIN_ROLE) {\n        paused = true;\n    }\n\n    function unpause() external onlyRole(ADMIN_ROLE) {\n        paused = false;\n    }\n\n    function setOfficer(\n        address officer,\n        bool enabled\n    ) external onlyRole(ADMIN_ROLE) {\n        if (enabled) {\n            _grantRole(OFFICER_ROLE, officer);\n        } else {\n            _revokeRole(OFFICER_ROLE, officer);\n        }\n        emit OfficerSet(officer, enabled);\n    }\n\n    /**\n     * Register a new officer with complete details\n     */\n    function addOfficer(\n        address walletAddress,\n        string memory name,\n        string memory designation,\n        string memory area,\n        string memory contracts,\n        string memory jurisdiction\n    ) external onlyRole(ADMIN_ROLE) {\n        require(walletAddress != address(0), \"INVALID_WALLET_ADDRESS\");\n        require(bytes(name).length > 0, \"NAME_REQUIRED\");\n        require(bytes(area).length > 0, \"AREA_REQUIRED\");\n        require(bytes(jurisdiction).length > 0, \"JURISDICTION_REQUIRED\");\n\n        // Check if officer already exists\n        require(!officers[walletAddress].isActive, \"OFFICER_ALREADY_EXISTS\");\n\n        // Create new officer\n        Officer memory newOfficer = Officer({\n            name: name,\n            designation: designation,\n            area: area,\n            contracts: contracts,\n            jurisdiction: jurisdiction,\n            walletAddress: walletAddress,\n            isActive: true,\n            assignedAt: block.timestamp\n        });\n\n        officers[walletAddress] = newOfficer;\n        officerAddresses.push(walletAddress);\n\n        // Add to area mapping\n        officersByArea[area].push(walletAddress);\n\n        // Add to jurisdiction mapping\n        officersByJurisdiction[jurisdiction].push(walletAddress);\n\n        // Grant officer role\n        _grantRole(OFFICER_ROLE, walletAddress);\n\n        emit OfficerRegistered(\n            walletAddress,\n            name,\n            designation,\n            area,\n            jurisdiction\n        );\n        emit OfficerSet(walletAddress, true);\n    }\n\n    /**\n     * Update existing officer details\n     */\n    function updateOfficer(\n        address walletAddress,\n        string memory name,\n        string memory designation,\n        string memory area,\n        string memory contracts,\n        string memory jurisdiction\n    ) external onlyRole(ADMIN_ROLE) {\n        require(officers[walletAddress].isActive, \"OFFICER_NOT_FOUND\");\n        require(bytes(name).length > 0, \"NAME_REQUIRED\");\n        require(bytes(area).length > 0, \"AREA_REQUIRED\");\n        require(bytes(jurisdiction).length > 0, \"JURISDICTION_REQUIRED\");\n\n        // Remove from old area mapping\n        string memory oldArea = officers[walletAddress].area;\n        removeFromArray(officersByArea[oldArea], walletAddress);\n\n        // Remove from old jurisdiction mapping\n        string memory oldJurisdiction = officers[walletAddress].jurisdiction;\n        removeFromArray(officersByJurisdiction[oldJurisdiction], walletAddress);\n\n        // Update officer details\n        officers[walletAddress].name = name;\n        officers[walletAddress].designation = designation;\n        officers[walletAddress].area = area;\n        officers[walletAddress].contracts = contracts;\n        officers[walletAddress].jurisdiction = jurisdiction;\n\n        // Add to new area mapping\n        officersByArea[area].push(walletAddress);\n\n        // Add to new jurisdiction mapping\n        officersByJurisdiction[jurisdiction].push(walletAddress);\n\n        emit OfficerUpdated(\n            walletAddress,\n            name,\n            designation,\n            area,\n            jurisdiction\n        );\n    }\n\n    /**\n     * Deactivate an officer\n     */\n    function deactivateOfficer(\n        address walletAddress\n    ) external onlyRole(ADMIN_ROLE) {\n        require(officers[walletAddress].isActive, \"OFFICER_NOT_FOUND\");\n\n        officers[walletAddress].isActive = false;\n\n        // Remove from area mapping\n        string memory area = officers[walletAddress].area;\n        removeFromArray(officersByArea[area], walletAddress);\n\n        // Remove from jurisdiction mapping\n        string memory jurisdiction = officers[walletAddress].jurisdiction;\n        removeFromArray(officersByJurisdiction[jurisdiction], walletAddress);\n\n        // Revoke officer role\n        _revokeRole(OFFICER_ROLE, walletAddress);\n\n        emit OfficerSet(walletAddress, false);\n    }\n\n    /**\n     * Get officer details by wallet address\n     */\n    function getOfficer(\n        address walletAddress\n    ) external view returns (Officer memory) {\n        return officers[walletAddress];\n    }\n\n    /**\n     * Get all officers in a specific area\n     */\n    function getOfficersByArea(\n        string memory area\n    ) external view returns (address[] memory) {\n        return officersByArea[area];\n    }\n\n    /**\n     * Get all officers in a specific jurisdiction\n     */\n    function getOfficersByJurisdiction(\n        string memory jurisdiction\n    ) external view returns (address[] memory) {\n        return officersByJurisdiction[jurisdiction];\n    }\n\n    /**\n     * Get all active officer addresses\n     */\n    function getAllOfficers() external view returns (address[] memory) {\n        return officerAddresses;\n    }\n\n    /**\n     * Helper function to remove address from array\n     */\n    function removeFromArray(address[] storage arr, address target) internal {\n        for (uint i = 0; i < arr.length; i++) {\n            if (arr[i] == target) {\n                arr[i] = arr[arr.length - 1];\n                arr.pop();\n                break;\n            }\n        }\n    }\n\n    // ——— User Management ———\n\n    /**\n     * Register a new user\n     */\n    function registerUser(\n        string memory firstName,\n        string memory lastName,\n        string memory phone,\n        string memory email,\n        string memory district\n    ) external {\n        require(!users[msg.sender].isRegistered, \"USER_ALREADY_REGISTERED\");\n        require(bytes(firstName).length > 0, \"FIRST_NAME_REQUIRED\");\n        require(bytes(lastName).length > 0, \"LAST_NAME_REQUIRED\");\n        require(bytes(phone).length > 0, \"PHONE_REQUIRED\");\n        require(bytes(email).length > 0, \"EMAIL_REQUIRED\");\n        require(bytes(district).length > 0, \"DISTRICT_REQUIRED\");\n\n        User memory newUser = User({\n            firstName: firstName,\n            lastName: lastName,\n            phone: phone,\n            email: email,\n            district: district,\n            walletAddress: msg.sender,\n            isRegistered: true,\n            registeredAt: block.timestamp\n        });\n\n        users[msg.sender] = newUser;\n        userAddresses.push(msg.sender);\n        usersByDistrict[district].push(msg.sender);\n\n        emit UserRegistered(msg.sender, firstName, lastName, district);\n    }\n\n    /**\n     * Get user details by wallet address\n     */\n    function getUser(\n        address walletAddress\n    ) external view returns (User memory) {\n        require(users[walletAddress].isRegistered, \"USER_NOT_REGISTERED\");\n        return users[walletAddress];\n    }\n\n    /**\n     * Check if user is registered\n     */\n    function isUserRegistered(\n        address walletAddress\n    ) external view returns (bool) {\n        return users[walletAddress].isRegistered;\n    }\n\n    /**\n     * Get all users in a specific district\n     */\n    function getUsersByDistrict(\n        string memory district\n    ) external view returns (address[] memory) {\n        return usersByDistrict[district];\n    }\n\n    /**\n     * Get all registered user addresses\n     */\n    function getAllUsers() external view returns (address[] memory) {\n        return userAddresses;\n    }\n\n    // ——— Project Management ———\n\n    /**\n     * Add a new project (only registered users can add projects)\n     */\n    function addProject(\n        string memory name,\n        string memory description,\n        string memory projectType,\n        uint256 startDate,\n        uint256 endDate,\n        string memory projectAddress,\n        string memory city,\n        string memory state,\n        uint256 landArea,\n        uint256 estimatedCredits,\n        string memory ipfsUrl\n    ) external {\n        require(users[msg.sender].isRegistered, \"USER_MUST_BE_REGISTERED\");\n        require(bytes(name).length > 0, \"PROJECT_NAME_REQUIRED\");\n        require(bytes(description).length > 0, \"PROJECT_DESCRIPTION_REQUIRED\");\n        require(bytes(projectType).length > 0, \"PROJECT_TYPE_REQUIRED\");\n        require(startDate > 0, \"START_DATE_REQUIRED\");\n        require(endDate > startDate, \"END_DATE_MUST_BE_AFTER_START_DATE\");\n        require(bytes(projectAddress).length > 0, \"PROJECT_ADDRESS_REQUIRED\");\n        require(bytes(city).length > 0, \"CITY_REQUIRED\");\n        require(bytes(state).length > 0, \"STATE_REQUIRED\");\n        require(landArea > 0, \"LAND_AREA_MUST_BE_POSITIVE\");\n        require(estimatedCredits > 0, \"ESTIMATED_CREDITS_MUST_BE_POSITIVE\");\n        require(bytes(ipfsUrl).length > 0, \"IPFS_URL_REQUIRED\");\n\n        projectCount++;\n        uint256 projectId = projectCount;\n\n        Project memory newProject = Project({\n            name: name,\n            description: description,\n            projectType: projectType,\n            startDate: startDate,\n            endDate: endDate,\n            projectAddress: projectAddress,\n            city: city,\n            state: state,\n            landArea: landArea,\n            estimatedCredits: estimatedCredits,\n            ipfsUrl: ipfsUrl,\n            owner: msg.sender,\n            assignedOfficer: address(0), // No officer assigned initially\n            isActive: true,\n            createdAt: block.timestamp,\n            verificationStatus: VerificationStatus.PENDING, // Initial status\n            verificationStartedAt: 0,\n            verificationCompletedAt: 0\n        });\n\n        projects[projectId] = newProject;\n        userProjects[msg.sender].push(projectId);\n\n        emit ProjectAdded(projectId, msg.sender, name, projectAddress);\n    }\n\n    /**\n     * Assign an officer to a project based on the project's city.\n     */\n    function assignOfficerToProject(\n        uint256 projectId,\n        address officer\n    ) external onlyRole(ADMIN_ROLE) {\n        require(projects[projectId].isActive, \"PROJECT_NOT_ACTIVE\");\n        require(\n            projects[projectId].assignedOfficer == address(0),\n            \"OFFICER_ALREADY_ASSIGNED\"\n        );\n        require(hasRole(OFFICER_ROLE, officer), \"NOT_OFFICER\");\n\n        projects[projectId].assignedOfficer = officer;\n        officerAssignedProjects[officer].push(projectId);\n        emit OfficerAssignedToProject(projectId, officer);\n    }\n\n    /**\n     * Get project details by project ID\n     */\n    function getProject(\n        uint256 projectId\n    ) external view returns (Project memory) {\n        require(\n            projectId > 0 && projectId <= projectCount,\n            \"PROJECT_NOT_FOUND\"\n        );\n        return projects[projectId];\n    }\n\n    /**\n     * Get all projects for a specific user\n     */\n    function getUserProjects(\n        address userAddress\n    ) external view returns (uint256[] memory) {\n        return userProjects[userAddress];\n    }\n\n    /**\n     * Get all projects assigned to a specific officer\n     */\n    function getOfficerAssignedProjects(\n        address officerAddress\n    ) external view returns (uint256[] memory) {\n        return officerAssignedProjects[officerAddress];\n    }\n\n    /**\n     * Get total number of projects\n     */\n    function getProjectCount() external view returns (uint256) {\n        return projectCount;\n    }\n\n    /**\n     * Remove a project (only admin can remove projects not created by them)\n     */\n    function removeProject(uint256 projectId) external onlyRole(ADMIN_ROLE) {\n        require(\n            projectId > 0 && projectId <= projectCount,\n            \"PROJECT_NOT_FOUND\"\n        );\n        require(projects[projectId].isActive, \"PROJECT_ALREADY_INACTIVE\");\n\n        // Only allow removal of projects not created by the admin\n        require(\n            projects[projectId].owner != msg.sender,\n            \"CANNOT_REMOVE_OWN_PROJECTS\"\n        );\n\n        // Mark project as inactive\n        projects[projectId].isActive = false;\n\n        emit ProjectRemoved(projectId, msg.sender);\n    }\n\n    // ——— Verification Management ———\n\n    /**\n     * Start verification process (called when officer clicks \"Start Verification\")\n     * Only assigned officers can start verification\n     */\n    function startVerification(uint256 projectId) external {\n        require(hasRole(OFFICER_ROLE, msg.sender), \"NOT_OFFICER\");\n        require(projects[projectId].isActive, \"PROJECT_NOT_ACTIVE\");\n        require(\n            projects[projectId].assignedOfficer == msg.sender,\n            \"NOT_ASSIGNED_OFFICER\"\n        );\n        require(\n            projects[projectId].verificationStatus ==\n                VerificationStatus.PENDING,\n            \"VERIFICATION_ALREADY_STARTED\"\n        );\n\n        projects[projectId].verificationStatus = VerificationStatus.IN_PROGRESS;\n        projects[projectId].verificationStartedAt = block.timestamp;\n\n        emit VerificationStatusUpdated(\n            projectId,\n            VerificationStatus.IN_PROGRESS,\n            msg.sender\n        );\n    }\n\n    /**\n     * Submit verification report\n     * Only assigned officers can submit reports\n     */\n    function submitVerificationReport(\n        uint256 projectId,\n        uint256 area,\n        uint256 plots,\n        uint256 uavFlights,\n        uint256 biomass,\n        uint256 uncertainty,\n        uint256 creditsRecommended,\n        bool siteInspection,\n        bool documentationVerified,\n        bool measurementsValidated,\n        bool qualityAssurance,\n        string memory additionalNotes\n    ) external {\n        require(hasRole(OFFICER_ROLE, msg.sender), \"NOT_OFFICER\");\n        require(projects[projectId].isActive, \"PROJECT_NOT_ACTIVE\");\n        require(\n            projects[projectId].assignedOfficer == msg.sender,\n            \"NOT_ASSIGNED_OFFICER\"\n        );\n        require(\n            projects[projectId].verificationStatus ==\n                VerificationStatus.IN_PROGRESS,\n            \"VERIFICATION_NOT_IN_PROGRESS\"\n        );\n        require(area > 0, \"AREA_MUST_BE_POSITIVE\");\n        require(plots > 0, \"PLOTS_MUST_BE_POSITIVE\");\n        require(uavFlights > 0, \"UAV_FLIGHTS_MUST_BE_POSITIVE\");\n        require(biomass > 0, \"BIOMASS_MUST_BE_POSITIVE\");\n        require(uncertainty <= 100, \"UNCERTAINTY_MUST_BE_0_TO_100\");\n        require(creditsRecommended > 0, \"CREDITS_MUST_BE_POSITIVE\");\n\n        verificationReportCount++;\n        uint256 reportId = verificationReportCount;\n\n        VerificationReport memory newReport = VerificationReport({\n            projectId: projectId,\n            officerAddress: msg.sender,\n            area: area,\n            plots: plots,\n            uavFlights: uavFlights,\n            biomass: biomass,\n            uncertainty: uncertainty,\n            creditsRecommended: creditsRecommended,\n            siteInspection: siteInspection,\n            documentationVerified: documentationVerified,\n            measurementsValidated: measurementsValidated,\n            qualityAssurance: qualityAssurance,\n            additionalNotes: additionalNotes,\n            submittedAt: block.timestamp,\n            isApproved: false,\n            approvedBy: address(0),\n            approvedAt: 0\n        });\n\n        verificationReports[reportId] = newReport;\n        projectToReportId[projectId] = reportId;\n\n        // Update project status to approved (assuming auto-approval for now)\n        projects[projectId].verificationStatus = VerificationStatus.APPROVED;\n        projects[projectId].verificationCompletedAt = block.timestamp;\n\n        emit VerificationReportSubmitted(\n            projectId,\n            reportId,\n            msg.sender,\n            creditsRecommended\n        );\n        emit VerificationStatusUpdated(\n            projectId,\n            VerificationStatus.APPROVED,\n            msg.sender\n        );\n    }\n\n    /**\n     * Approve verification report (admin function)\n     */\n    function approveVerificationReport(\n        uint256 projectId\n    ) external onlyRole(ADMIN_ROLE) {\n        require(projects[projectId].isActive, \"PROJECT_NOT_ACTIVE\");\n        uint256 reportId = projectToReportId[projectId];\n        require(reportId > 0, \"NO_REPORT_FOUND\");\n        require(\n            !verificationReports[reportId].isApproved,\n            \"REPORT_ALREADY_APPROVED\"\n        );\n\n        verificationReports[reportId].isApproved = true;\n        verificationReports[reportId].approvedBy = msg.sender;\n        verificationReports[reportId].approvedAt = block.timestamp;\n\n        projects[projectId].verificationStatus = VerificationStatus.APPROVED;\n        projects[projectId].verificationCompletedAt = block.timestamp;\n\n        emit VerificationReportApproved(projectId, reportId, msg.sender);\n        emit VerificationStatusUpdated(\n            projectId,\n            VerificationStatus.APPROVED,\n            msg.sender\n        );\n    }\n\n    /**\n     * Reject verification report (admin function)\n     */\n    function rejectVerificationReport(\n        uint256 projectId\n    ) external onlyRole(ADMIN_ROLE) {\n        require(projects[projectId].isActive, \"PROJECT_NOT_ACTIVE\");\n        uint256 reportId = projectToReportId[projectId];\n        require(reportId > 0, \"NO_REPORT_FOUND\");\n\n        projects[projectId].verificationStatus = VerificationStatus.REJECTED;\n        projects[projectId].verificationCompletedAt = block.timestamp;\n\n        emit VerificationStatusUpdated(\n            projectId,\n            VerificationStatus.REJECTED,\n            msg.sender\n        );\n    }\n\n    /**\n     * Get verification report by project ID\n     */\n    function getVerificationReport(\n        uint256 projectId\n    ) external view returns (VerificationReport memory) {\n        uint256 reportId = projectToReportId[projectId];\n        require(reportId > 0, \"NO_REPORT_FOUND\");\n        return verificationReports[reportId];\n    }\n\n    /**\n     * Get verification report by report ID\n     */\n    function getVerificationReportById(\n        uint256 reportId\n    ) external view returns (VerificationReport memory) {\n        require(\n            reportId > 0 && reportId <= verificationReportCount,\n            \"REPORT_NOT_FOUND\"\n        );\n        return verificationReports[reportId];\n    }\n\n    /**\n     * Get total number of verification reports\n     */\n    function getVerificationReportCount() external view returns (uint256) {\n        return verificationReportCount;\n    }\n\n    /**\n     * Approve a report (by IPFS CID) and mint tokens to an officer or directly to a user.\n     * Prevents double‑mint for the same CID via reportKey lock.\n     */\n    function approveAndMint(\n        string calldata cid,\n        address recipient,\n        uint256 amount,\n        address submitter\n    ) external onlyRole(ADMIN_ROLE) returns (bytes32 reportKey) {\n        require(!paused, \"CONTRACT_PAUSED\");\n        require(recipient != address(0), \"BAD_RECIPIENT\");\n        require(amount > 0, \"ZERO_AMOUNT\");\n        reportKey = keccak256(abi.encodePacked(cid));\n        ReportApproval storage ra = approvals[reportKey];\n        require(!ra.minted, \"REPORT_ALREADY_MINTED\");\n\n        // Record approval\n        ra.submitter = submitter;\n        ra.cid = cid;\n        ra.recipient = recipient;\n        ra.approvedAmount = amount;\n        ra.approvedAt = uint64(block.timestamp);\n        ra.minted = true;\n\n        _mint(recipient, amount);\n        emit ReportApprovedAndMinted(reportKey, recipient, amount, cid);\n    }\n\n    /**\n     * Admin may burn own balance (supply reduction) or claw back from any address if your\n     * program rules require it (disclose clearly to users!).\n     */\n    function adminBurn(uint256 amount) external onlyRole(ADMIN_ROLE) {\n        require(!paused, \"CONTRACT_PAUSED\");\n        _burn(_msgSender(), amount);\n    }\n\n    function adminBurnFrom(\n        address from,\n        uint256 amount\n    ) external onlyRole(ADMIN_ROLE) {\n        require(!paused, \"CONTRACT_PAUSED\");\n        _burn(from, amount);\n    }\n\n    /**\n     * Optional convenience: move admin‑held tokens to an officer.\n     * (You can also mint directly to the officer in approveAndMint.)\n     */\n    function adminTransferToOfficer(\n        address officer,\n        uint256 amount\n    ) external onlyRole(ADMIN_ROLE) {\n        require(!paused, \"CONTRACT_PAUSED\");\n        require(hasRole(OFFICER_ROLE, officer), \"NOT_OFFICER\");\n        _transfer(_msgSender(), officer, amount);\n    }\n\n    // ——— ERC‑20 hooks to enforce transfer policy + maintain ledger ———\n    function _update(\n        address from,\n        address to,\n        uint256 value\n    ) internal override {\n        require(!paused, \"CONTRACT_PAUSED\");\n\n        if (from != address(0) && to != address(0)) {\n            bool fromAdmin = hasRole(ADMIN_ROLE, from);\n            bool fromOfficer = hasRole(OFFICER_ROLE, from);\n            // Only admin or officer can send tokens\n            require(fromAdmin || fromOfficer, \"TRANSFER_DENIED\");\n            // Officers may only distribute to end‑users (not to admin/officers)\n            if (fromOfficer) {\n                require(\n                    !hasRole(ADMIN_ROLE, to) && !hasRole(OFFICER_ROLE, to),\n                    \"OFFICER_TO_ADMIN_OR_OFFICER_FORBIDDEN\"\n                );\n            }\n        }\n\n        super._update(from, to, value);\n\n        // Update ledger after transfer\n        if (from == address(0)) {\n            // Mint\n            mintedCumulative += value;\n            if (hasRole(OFFICER_ROLE, to)) {\n                officerReceived[to] += value;\n            }\n        } else if (to == address(0)) {\n            // Burn\n            burnedCumulative += value;\n        } else {\n            // Transfer\n            if (hasRole(ADMIN_ROLE, from) && hasRole(OFFICER_ROLE, to)) {\n                officerReceived[to] += value; // admin → officer top‑up\n            } else if (\n                hasRole(OFFICER_ROLE, from) &&\n                !hasRole(ADMIN_ROLE, to) &&\n                !hasRole(OFFICER_ROLE, to)\n            ) {\n                officerDistributed[from] += value;\n                userReceived[to] += value;\n                emit OfficerDistributed(from, to, value);\n            }\n        }\n    }\n\n    // ——— ERC‑20 config ———\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n}\n"
      }
    }
  }
}